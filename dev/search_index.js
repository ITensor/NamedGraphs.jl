var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NamedGraphs","category":"page"},{"location":"#NamedGraphs","page":"Home","title":"NamedGraphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NamedGraphs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NamedGraphs]","category":"page"},{"location":"#NamedGraphs.DefaultNamedCapacity","page":"Home","title":"NamedGraphs.DefaultNamedCapacity","text":"DefaultNamedCapacity{T}\n\nStructure that returns 1 if a forward edge exists in flow_graph, and 0 otherwise.\n\n\n\n\n\n","category":"type"},{"location":"#NamedGraphs.NamedDijkstraState","page":"Home","title":"NamedGraphs.NamedDijkstraState","text":"struct NamedDijkstraState{V,T}\n\nAn AbstractPathState designed for Dijkstra shortest-paths calculations.\n\n\n\n\n\n","category":"type"},{"location":"#NamedGraphs.incident_edges-Tuple{Graphs.AbstractGraph, Any}","page":"Home","title":"NamedGraphs.incident_edges","text":"incident_edges(graph::AbstractGraph, vertex; dir=:out)\n\nEdges incident to the vertex vertex.\n\ndir âˆˆ (:in, :out, :both), defaults to :out.\n\nFor undirected graphs, returns all incident edges.\n\nLike: https://juliagraphs.org/Graphs.jl/v1.7/algorithms/linalg/#Graphs.LinAlg.adjacency_matrix\n\n\n\n\n\n","category":"method"}]
}
